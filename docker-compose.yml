###############################################################################
#                          Generated By Yixuan                                #
###############################################################################

version: "3.8"

networks:
  network:
    ipam:
      driver: default
      config:
        - subnet: '172.26.0.0/24'

services:
  web:
    build:
      context: ./
      dockerfile: ./dockerfile_web
    container_name: awesome-web
    restart: always
    ports:
      - '8080:8080'
    depends_on:
      - server
    links:
      - server
    command: [ 'nginx-debug', '-g', 'daemon off;' ]
    networks:
      network:
        ipv4_address: 172.26.0.11

  server:
    build:
      context: ./
      dockerfile: ./dockerfile_service
    container_name: awesome-server
    restart: always
    ports:
      - '8088:8088'
    depends_on:
      - mysql-master
      - mysql-node-1
      - mysql-node-2
      - redis-master
      - minio
    links:
      - mysql-master
      - mysql-node-1
      - mysql-node-2
      - redis-master
      - minio
    networks:
      network:
        ipv4_address: 172.26.0.2

  mysql-master: &mysql
    image: mysql:${TAG}
    container_name: awesome-mysql-master
    restart: unless-stopped
    env_file:
      - /home/yuxue/docker/docker-compose/docker/mysql/env/base.env
      - /home/yuxue/docker/docker-compose/docker/mysql/env/master.env
    environment:
      - MYSQL_ROOT_PASSWORD=${MASTER_MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    expose:
      - "3306"
    volumes:
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-master-data:/var/lib/mysql
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-master-log:/var/log/mysql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/init-master.sh:/docker-entrypoint-initdb.d/3-init-master.sh
    command: [
      "--log-bin=mysql-master-bin",
      "--server-id=${MASTER_SERVER_ID}",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--innodb_flush_log_at_trx_commit=1",
      "--sync_binlog=1"
      ]
    networks:
      network:
        ipv4_address: 172.26.0.3

  mysql-node-1: &mysql-node
    <<: *mysql
    container_name: awesome-mysql-node-1
    environment:
      - MYSQL_ROOT_PASSWORD=${NODE_MYSQL_ROOT_PASSWORD}
      - MASTER_MYSQL_ROOT_PASSWORD=${MASTER_MYSQL_ROOT_PASSWORD}
    ports:
      - "3307:3306"
    depends_on:
      - mysql-master
    volumes:
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-node-1-data:/var/lib/mysql
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-node-1-log:/var/log/mysql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/init-node.sh:/docker-entrypoint-initdb.d/3-init-node.sh
    command: [
      "--server-id=${NODE_1_SERVER_ID}",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--relay-log=mysql-node-relay-bin"
      ]
    networks:
      network:
        ipv4_address: 172.26.0.4

  mysql-node-2:
    <<: *mysql-node
    container_name: awesome-mysql-node-2
    ports:
      - "3308:3306"
    volumes: 
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-node-2-data:/var/lib/mysql
      - /home/yuxue/docker/docker-compose/data/mysql/mysql-node-2-log:/var/log/mysql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/sakila-data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - /home/yuxue/docker/docker-compose/docker/mysql/init-db-sql/init-node.sh:/docker-entrypoint-initdb.d/3-init-node.sh
    command: [
      "--server-id=${NODE_2_SERVER_ID}",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--relay-log=mysql-node-relay-bin"
      ]
    networks:
      network:
        ipv4_address: 172.26.0.5

  redis-master:
    image: redis:6.0.6-alpine
    ports:
      - 6379:6379
    volumes:
      - type: volume
        source: master-data
        target: /data
    command: [
      '--requirepass "${REDIS_PWD}"',
      '--masterauth "${REDIS_PWD}"',
      '--maxmemory 512mb',
      '--maxmemory-policy volatile-ttl',
      '--save ""',
    ]
    networks:
      network:
        ipv4_address: 172.26.0.6

  node-1: &node
    image: redis:6.0.6-alpine
    depends_on:
      - redis-master
    ports:
      - 6380:6380
    volumes:
      - type: volume
        source: node-1-data
        target: /data
      - type: volume
        source: node-1-data
        target: /tmp
    command: [
      '--port 6380',
      '--requirepass "${REDIS_PWD}"',
      '--slaveof redis-master 6379',
      '--masterauth "${REDIS_PWD}"',
      '--save ""',
    ]
    links:
      - redis-master:${SENTINEL_MASTER_NAME}
    networks:
      network:
        ipv4_address: 172.26.0.7

  node-2: 
    <<: *node
    ports:
      - 6381:6381
    volumes:
      - type: volume
        source: node-2-data
        target: /data
      - type: volume
        source: node-2-data
        target: /tmp
    command: [
      '--port 6381',
      '--requirepass "${REDIS_PWD}"',
      '--slaveof redis-master 6379',
      '--masterauth "${REDIS_PWD}"',
      '--save ""',
    ]
    networks:
      network:
        ipv4_address: 172.26.0.8

  sentinel-1: &sentinel
    build:
      context: ./sentinel
      dockerfile: Dockerfile-sentinel
    image: redis-sentinel:dev
    environment:
      - SENTINEL_REDIS_PWD=${REDIS_PWD}
      - SENTINEL_REDIS_IP=${SENTINEL_MASTER_NAME}
      - SENTINEL_QUORUM=2
      - SENTINEL_DOWN_AFTER=3000
      - SENTINEL_REDIS_PORT=6379
      - SENTINEL_PORT=26379
    command: [
      '${SENTINEL_CONF_PATH}',
      '--sentinel'
    ]
    depends_on:
      - redis-master
      - node-1
      - node-2
    links:
      - redis-master:${SENTINEL_MASTER_NAME}
      - node-1
      - node-2
    networks:
      network:
        ipv4_address: 172.26.0.9

  minio:
    image: minio/minio:RELEASE.2021-06-17T00-10-46Z
    volumes:
      - /home/yuxue/docker/minio/data:/data
      - /home/yuxue/docker/minio/config:/root/.minio
    ports:
      - "9000:9000"
    restart: always
    environment:
      MINIO_SECRET_KEY: 'minioadmin' # secret
      MINIO_ACCESS_KEY: 'minioadmin' # user
    container_name: awesome-minio
    command: server /data
    networks:
      network:
        ipv4_address: 172.26.0.10

volumes:
  master-data:
  node-1-data:
  node-2-data: